// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class DepositSource extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DepositSource entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DepositSource must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DepositSource", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DepositSource | null {
    return changetype<DepositSource | null>(
      store.get_in_block("DepositSource", id)
    );
  }

  static load(id: string): DepositSource | null {
    return changetype<DepositSource | null>(store.get("DepositSource", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): BigInt | null {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt | null) {
    if (!value) {
      this.unset("createdAt");
    } else {
      this.set("createdAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get creationBlock(): BigInt | null {
    let value = this.get("creationBlock");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set creationBlock(value: BigInt | null) {
    if (!value) {
      this.unset("creationBlock");
    } else {
      this.set("creationBlock", Value.fromBigInt(<BigInt>value));
    }
  }

  get transactionHash(): Bytes | null {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes | null) {
    if (!value) {
      this.unset("transactionHash");
    } else {
      this.set("transactionHash", Value.fromBytes(<Bytes>value));
    }
  }

  get sourceChainId(): BigInt | null {
    let value = this.get("sourceChainId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set sourceChainId(value: BigInt | null) {
    if (!value) {
      this.unset("sourceChainId");
    } else {
      this.set("sourceChainId", Value.fromBigInt(<BigInt>value));
    }
  }

  get destinationChainId(): BigInt | null {
    let value = this.get("destinationChainId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set destinationChainId(value: BigInt | null) {
    if (!value) {
      this.unset("destinationChainId");
    } else {
      this.set("destinationChainId", Value.fromBigInt(<BigInt>value));
    }
  }

  get resourceId(): string | null {
    let value = this.get("resourceId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set resourceId(value: string | null) {
    if (!value) {
      this.unset("resourceId");
    } else {
      this.set("resourceId", Value.fromString(<string>value));
    }
  }

  get depositNonce(): BigInt | null {
    let value = this.get("depositNonce");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set depositNonce(value: BigInt | null) {
    if (!value) {
      this.unset("depositNonce");
    } else {
      this.set("depositNonce", Value.fromBigInt(<BigInt>value));
    }
  }

  get userAddress(): string | null {
    let value = this.get("userAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set userAddress(value: string | null) {
    if (!value) {
      this.unset("userAddress");
    } else {
      this.set("userAddress", Value.fromString(<string>value));
    }
  }

  get widgetId(): BigInt | null {
    let value = this.get("widgetId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set widgetId(value: BigInt | null) {
    if (!value) {
      this.unset("widgetId");
    } else {
      this.set("widgetId", Value.fromBigInt(<BigInt>value));
    }
  }

  get isGeneric(): boolean {
    let value = this.get("isGeneric");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isGeneric(value: boolean) {
    this.set("isGeneric", Value.fromBoolean(value));
  }

  get isSequenced(): boolean {
    let value = this.get("isSequenced");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isSequenced(value: boolean) {
    this.set("isSequenced", Value.fromBoolean(value));
  }

  get implementationContract(): string | null {
    let value = this.get("implementationContract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set implementationContract(value: string | null) {
    if (!value) {
      this.unset("implementationContract");
    } else {
      this.set("implementationContract", Value.fromString(<string>value));
    }
  }
}

export class ProposalDestination extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ProposalDestination entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ProposalDestination must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ProposalDestination", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ProposalDestination | null {
    return changetype<ProposalDestination | null>(
      store.get_in_block("ProposalDestination", id)
    );
  }

  static load(id: string): ProposalDestination | null {
    return changetype<ProposalDestination | null>(
      store.get("ProposalDestination", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): BigInt | null {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt | null) {
    if (!value) {
      this.unset("createdAt");
    } else {
      this.set("createdAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get creationBlock(): BigInt | null {
    let value = this.get("creationBlock");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set creationBlock(value: BigInt | null) {
    if (!value) {
      this.unset("creationBlock");
    } else {
      this.set("creationBlock", Value.fromBigInt(<BigInt>value));
    }
  }

  get transactionHash(): Bytes | null {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes | null) {
    if (!value) {
      this.unset("transactionHash");
    } else {
      this.set("transactionHash", Value.fromBytes(<Bytes>value));
    }
  }

  get sourceChainId(): BigInt | null {
    let value = this.get("sourceChainId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set sourceChainId(value: BigInt | null) {
    if (!value) {
      this.unset("sourceChainId");
    } else {
      this.set("sourceChainId", Value.fromBigInt(<BigInt>value));
    }
  }

  get destinationChainId(): BigInt | null {
    let value = this.get("destinationChainId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set destinationChainId(value: BigInt | null) {
    if (!value) {
      this.unset("destinationChainId");
    } else {
      this.set("destinationChainId", Value.fromBigInt(<BigInt>value));
    }
  }

  get settlementToken(): string | null {
    let value = this.get("settlementToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set settlementToken(value: string | null) {
    if (!value) {
      this.unset("settlementToken");
    } else {
      this.set("settlementToken", Value.fromString(<string>value));
    }
  }

  get settlementAmount(): BigInt | null {
    let value = this.get("settlementAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set settlementAmount(value: BigInt | null) {
    if (!value) {
      this.unset("settlementAmount");
    } else {
      this.set("settlementAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get depositNonce(): BigInt | null {
    let value = this.get("depositNonce");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set depositNonce(value: BigInt | null) {
    if (!value) {
      this.unset("depositNonce");
    } else {
      this.set("depositNonce", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class ProposalDestinationGeneric extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ProposalDestinationGeneric entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ProposalDestinationGeneric must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ProposalDestinationGeneric", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ProposalDestinationGeneric | null {
    return changetype<ProposalDestinationGeneric | null>(
      store.get_in_block("ProposalDestinationGeneric", id)
    );
  }

  static load(id: string): ProposalDestinationGeneric | null {
    return changetype<ProposalDestinationGeneric | null>(
      store.get("ProposalDestinationGeneric", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): BigInt | null {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt | null) {
    if (!value) {
      this.unset("createdAt");
    } else {
      this.set("createdAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get creationBlock(): BigInt | null {
    let value = this.get("creationBlock");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set creationBlock(value: BigInt | null) {
    if (!value) {
      this.unset("creationBlock");
    } else {
      this.set("creationBlock", Value.fromBigInt(<BigInt>value));
    }
  }

  get transactionHash(): Bytes | null {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes | null) {
    if (!value) {
      this.unset("transactionHash");
    } else {
      this.set("transactionHash", Value.fromBytes(<Bytes>value));
    }
  }

  get sourceChainId(): BigInt | null {
    let value = this.get("sourceChainId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set sourceChainId(value: BigInt | null) {
    if (!value) {
      this.unset("sourceChainId");
    } else {
      this.set("sourceChainId", Value.fromBigInt(<BigInt>value));
    }
  }

  get destinationChainId(): BigInt | null {
    let value = this.get("destinationChainId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set destinationChainId(value: BigInt | null) {
    if (!value) {
      this.unset("destinationChainId");
    } else {
      this.set("destinationChainId", Value.fromBigInt(<BigInt>value));
    }
  }

  get depositNonce(): BigInt | null {
    let value = this.get("depositNonce");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set depositNonce(value: BigInt | null) {
    if (!value) {
      this.unset("depositNonce");
    } else {
      this.set("depositNonce", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class AllTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AllTransaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AllTransaction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AllTransaction", id.toString(), this);
    }
  }

  static loadInBlock(id: string): AllTransaction | null {
    return changetype<AllTransaction | null>(
      store.get_in_block("AllTransaction", id)
    );
  }

  static load(id: string): AllTransaction | null {
    return changetype<AllTransaction | null>(store.get("AllTransaction", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class Pool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Pool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Pool must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Pool", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Pool | null {
    return changetype<Pool | null>(store.get_in_block("Pool", id));
  }

  static load(id: string): Pool | null {
    return changetype<Pool | null>(store.get("Pool", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tvl(): BigInt {
    let value = this.get("tvl");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tvl(value: BigInt) {
    this.set("tvl", Value.fromBigInt(value));
  }

  get userAddress(): string | null {
    let value = this.get("userAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set userAddress(value: string | null) {
    if (!value) {
      this.unset("userAddress");
    } else {
      this.set("userAddress", Value.fromString(<string>value));
    }
  }
}

export class PoolDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolDayData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolDayData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PoolDayData", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PoolDayData | null {
    return changetype<PoolDayData | null>(
      store.get_in_block("PoolDayData", id)
    );
  }

  static load(id: string): PoolDayData | null {
    return changetype<PoolDayData | null>(store.get("PoolDayData", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get dayValueLocked(): BigInt | null {
    let value = this.get("dayValueLocked");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dayValueLocked(value: BigInt | null) {
    if (!value) {
      this.unset("dayValueLocked");
    } else {
      this.set("dayValueLocked", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class SameChainDeposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SameChainDeposit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SameChainDeposit must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SameChainDeposit", id.toString(), this);
    }
  }

  static loadInBlock(id: string): SameChainDeposit | null {
    return changetype<SameChainDeposit | null>(
      store.get_in_block("SameChainDeposit", id)
    );
  }

  static load(id: string): SameChainDeposit | null {
    return changetype<SameChainDeposit | null>(
      store.get("SameChainDeposit", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): BigInt | null {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt | null) {
    if (!value) {
      this.unset("createdAt");
    } else {
      this.set("createdAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get creationBlock(): BigInt | null {
    let value = this.get("creationBlock");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set creationBlock(value: BigInt | null) {
    if (!value) {
      this.unset("creationBlock");
    } else {
      this.set("creationBlock", Value.fromBigInt(<BigInt>value));
    }
  }

  get chainId(): BigInt | null {
    let value = this.get("chainId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set chainId(value: BigInt | null) {
    if (!value) {
      this.unset("chainId");
    } else {
      this.set("chainId", Value.fromBigInt(<BigInt>value));
    }
  }

  get depositorAddress(): string | null {
    let value = this.get("depositorAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set depositorAddress(value: string | null) {
    if (!value) {
      this.unset("depositorAddress");
    } else {
      this.set("depositorAddress", Value.fromString(<string>value));
    }
  }

  get recipientAddress(): string | null {
    let value = this.get("recipientAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set recipientAddress(value: string | null) {
    if (!value) {
      this.unset("recipientAddress");
    } else {
      this.set("recipientAddress", Value.fromString(<string>value));
    }
  }

  get depositedAmount(): string | null {
    let value = this.get("depositedAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set depositedAmount(value: string | null) {
    if (!value) {
      this.unset("depositedAmount");
    } else {
      this.set("depositedAmount", Value.fromString(<string>value));
    }
  }

  get receivedAmount(): string | null {
    let value = this.get("receivedAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set receivedAmount(value: string | null) {
    if (!value) {
      this.unset("receivedAmount");
    } else {
      this.set("receivedAmount", Value.fromString(<string>value));
    }
  }

  get depositedTokenAddress(): string | null {
    let value = this.get("depositedTokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set depositedTokenAddress(value: string | null) {
    if (!value) {
      this.unset("depositedTokenAddress");
    } else {
      this.set("depositedTokenAddress", Value.fromString(<string>value));
    }
  }

  get receivedTokenAddress(): string | null {
    let value = this.get("receivedTokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set receivedTokenAddress(value: string | null) {
    if (!value) {
      this.unset("receivedTokenAddress");
    } else {
      this.set("receivedTokenAddress", Value.fromString(<string>value));
    }
  }

  get widgetId(): BigInt | null {
    let value = this.get("widgetId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set widgetId(value: BigInt | null) {
    if (!value) {
      this.unset("widgetId");
    } else {
      this.set("widgetId", Value.fromBigInt(<BigInt>value));
    }
  }
}
