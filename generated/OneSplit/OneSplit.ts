// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Swap extends ethereum.Event {
  get params(): Swap__Params {
    return new Swap__Params(this);
  }
}

export class Swap__Params {
  _event: Swap;

  constructor(event: Swap) {
    this._event = event;
  }

  get funcName(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get tokenPath(): Array<Address> {
    return this._event.parameters[1].value.toAddressArray();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get finalAmt(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get flags(): Array<BigInt> {
    return this._event.parameters[6].value.toBigIntArray();
  }

  get widgetID(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OneSplit__getExpectedReturnResult {
  value0: BigInt;
  value1: Array<BigInt>;

  constructor(value0: BigInt, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }

  getReturnAmount(): BigInt {
    return this.value0;
  }

  getDistribution(): Array<BigInt> {
    return this.value1;
  }
}

export class OneSplit__getExpectedReturnWithGasResult {
  value0: BigInt;
  value1: BigInt;
  value2: Array<BigInt>;

  constructor(value0: BigInt, value1: BigInt, value2: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    return map;
  }

  getReturnAmount(): BigInt {
    return this.value0;
  }

  getEstimateGasAmount(): BigInt {
    return this.value1;
  }

  getDistribution(): Array<BigInt> {
    return this.value2;
  }
}

export class OneSplit__getExpectedReturnWithGasMultiResult {
  value0: Array<BigInt>;
  value1: BigInt;
  value2: Array<BigInt>;

  constructor(value0: Array<BigInt>, value1: BigInt, value2: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    return map;
  }

  getReturnAmounts(): Array<BigInt> {
    return this.value0;
  }

  getEstimateGasAmount(): BigInt {
    return this.value1;
  }

  getDistribution(): Array<BigInt> {
    return this.value2;
  }
}

export class OneSplit__setFlagToFactoryAddressMultiInputDexesArgsStruct extends ethereum.Tuple {
  get factoryAddress(): Address {
    return this[0].toAddress();
  }

  get _exchangeCode(): BigInt {
    return this[1].toBigInt();
  }
}

export class OneSplit extends ethereum.SmartContract {
  static bind(address: Address): OneSplit {
    return new OneSplit("OneSplit", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  FACTORY_SETTER_ROLE(): Bytes {
    let result = super.call(
      "FACTORY_SETTER_ROLE",
      "FACTORY_SETTER_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_FACTORY_SETTER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "FACTORY_SETTER_ROLE",
      "FACTORY_SETTER_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  _ethHandler(): Address {
    let result = super.call("_ethHandler", "_ethHandler():(address)", []);

    return result[0].toAddress();
  }

  try__ethHandler(): ethereum.CallResult<Address> {
    let result = super.tryCall("_ethHandler", "_ethHandler():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  bridgeInstance(): Address {
    let result = super.call("bridgeInstance", "bridgeInstance():(address)", []);

    return result[0].toAddress();
  }

  try_bridgeInstance(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "bridgeInstance",
      "bridgeInstance():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  flagToAddress(param0: BigInt): Address {
    let result = super.call(
      "flagToAddress",
      "flagToAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_flagToAddress(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "flagToAddress",
      "flagToAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getExpectedReturn(
    fromToken: Address,
    destToken: Address,
    amount: BigInt,
    parts: BigInt,
    flags: BigInt
  ): OneSplit__getExpectedReturnResult {
    let result = super.call(
      "getExpectedReturn",
      "getExpectedReturn(address,address,uint256,uint256,uint256):(uint256,uint256[])",
      [
        ethereum.Value.fromAddress(fromToken),
        ethereum.Value.fromAddress(destToken),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(parts),
        ethereum.Value.fromUnsignedBigInt(flags)
      ]
    );

    return new OneSplit__getExpectedReturnResult(
      result[0].toBigInt(),
      result[1].toBigIntArray()
    );
  }

  try_getExpectedReturn(
    fromToken: Address,
    destToken: Address,
    amount: BigInt,
    parts: BigInt,
    flags: BigInt
  ): ethereum.CallResult<OneSplit__getExpectedReturnResult> {
    let result = super.tryCall(
      "getExpectedReturn",
      "getExpectedReturn(address,address,uint256,uint256,uint256):(uint256,uint256[])",
      [
        ethereum.Value.fromAddress(fromToken),
        ethereum.Value.fromAddress(destToken),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(parts),
        ethereum.Value.fromUnsignedBigInt(flags)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OneSplit__getExpectedReturnResult(
        value[0].toBigInt(),
        value[1].toBigIntArray()
      )
    );
  }

  getExpectedReturnETH(
    srcStableFromToken: Address,
    srcStableFromTokenAmount: BigInt,
    parts: BigInt,
    flags: BigInt
  ): BigInt {
    let result = super.call(
      "getExpectedReturnETH",
      "getExpectedReturnETH(address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(srcStableFromToken),
        ethereum.Value.fromUnsignedBigInt(srcStableFromTokenAmount),
        ethereum.Value.fromUnsignedBigInt(parts),
        ethereum.Value.fromUnsignedBigInt(flags)
      ]
    );

    return result[0].toBigInt();
  }

  try_getExpectedReturnETH(
    srcStableFromToken: Address,
    srcStableFromTokenAmount: BigInt,
    parts: BigInt,
    flags: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getExpectedReturnETH",
      "getExpectedReturnETH(address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(srcStableFromToken),
        ethereum.Value.fromUnsignedBigInt(srcStableFromTokenAmount),
        ethereum.Value.fromUnsignedBigInt(parts),
        ethereum.Value.fromUnsignedBigInt(flags)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getExpectedReturnWithGas(
    fromToken: Address,
    destToken: Address,
    amount: BigInt,
    parts: BigInt,
    flags: BigInt,
    destTokenEthPriceTimesGasPrice: BigInt
  ): OneSplit__getExpectedReturnWithGasResult {
    let result = super.call(
      "getExpectedReturnWithGas",
      "getExpectedReturnWithGas(address,address,uint256,uint256,uint256,uint256):(uint256,uint256,uint256[])",
      [
        ethereum.Value.fromAddress(fromToken),
        ethereum.Value.fromAddress(destToken),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(parts),
        ethereum.Value.fromUnsignedBigInt(flags),
        ethereum.Value.fromUnsignedBigInt(destTokenEthPriceTimesGasPrice)
      ]
    );

    return new OneSplit__getExpectedReturnWithGasResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigIntArray()
    );
  }

  try_getExpectedReturnWithGas(
    fromToken: Address,
    destToken: Address,
    amount: BigInt,
    parts: BigInt,
    flags: BigInt,
    destTokenEthPriceTimesGasPrice: BigInt
  ): ethereum.CallResult<OneSplit__getExpectedReturnWithGasResult> {
    let result = super.tryCall(
      "getExpectedReturnWithGas",
      "getExpectedReturnWithGas(address,address,uint256,uint256,uint256,uint256):(uint256,uint256,uint256[])",
      [
        ethereum.Value.fromAddress(fromToken),
        ethereum.Value.fromAddress(destToken),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(parts),
        ethereum.Value.fromUnsignedBigInt(flags),
        ethereum.Value.fromUnsignedBigInt(destTokenEthPriceTimesGasPrice)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OneSplit__getExpectedReturnWithGasResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigIntArray()
      )
    );
  }

  getExpectedReturnWithGasMulti(
    tokens: Array<Address>,
    amount: BigInt,
    parts: Array<BigInt>,
    flags: Array<BigInt>,
    destTokenEthPriceTimesGasPrices: Array<BigInt>
  ): OneSplit__getExpectedReturnWithGasMultiResult {
    let result = super.call(
      "getExpectedReturnWithGasMulti",
      "getExpectedReturnWithGasMulti(address[],uint256,uint256[],uint256[],uint256[]):(uint256[],uint256,uint256[])",
      [
        ethereum.Value.fromAddressArray(tokens),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigIntArray(parts),
        ethereum.Value.fromUnsignedBigIntArray(flags),
        ethereum.Value.fromUnsignedBigIntArray(destTokenEthPriceTimesGasPrices)
      ]
    );

    return new OneSplit__getExpectedReturnWithGasMultiResult(
      result[0].toBigIntArray(),
      result[1].toBigInt(),
      result[2].toBigIntArray()
    );
  }

  try_getExpectedReturnWithGasMulti(
    tokens: Array<Address>,
    amount: BigInt,
    parts: Array<BigInt>,
    flags: Array<BigInt>,
    destTokenEthPriceTimesGasPrices: Array<BigInt>
  ): ethereum.CallResult<OneSplit__getExpectedReturnWithGasMultiResult> {
    let result = super.tryCall(
      "getExpectedReturnWithGasMulti",
      "getExpectedReturnWithGasMulti(address[],uint256,uint256[],uint256[],uint256[]):(uint256[],uint256,uint256[])",
      [
        ethereum.Value.fromAddressArray(tokens),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigIntArray(parts),
        ethereum.Value.fromUnsignedBigIntArray(flags),
        ethereum.Value.fromUnsignedBigIntArray(destTokenEthPriceTimesGasPrices)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OneSplit__getExpectedReturnWithGasMultiResult(
        value[0].toBigIntArray(),
        value[1].toBigInt(),
        value[2].toBigIntArray()
      )
    );
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  handlerAddress(): Address {
    let result = super.call("handlerAddress", "handlerAddress():(address)", []);

    return result[0].toAddress();
  }

  try_handlerAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "handlerAddress",
      "handlerAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  nativeAddress(): Address {
    let result = super.call("nativeAddress", "nativeAddress():(address)", []);

    return result[0].toAddress();
  }

  try_nativeAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "nativeAddress",
      "nativeAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  oneSplitView(): Address {
    let result = super.call("oneSplitView", "oneSplitView():(address)", []);

    return result[0].toAddress();
  }

  try_oneSplitView(): ethereum.CallResult<Address> {
    let result = super.tryCall("oneSplitView", "oneSplitView():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  reserveInstance(): Address {
    let result = super.call(
      "reserveInstance",
      "reserveInstance():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_reserveInstance(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "reserveInstance",
      "reserveInstance():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  setBridgeAddress(_bridgeAddress: Address): boolean {
    let result = super.call(
      "setBridgeAddress",
      "setBridgeAddress(address):(bool)",
      [ethereum.Value.fromAddress(_bridgeAddress)]
    );

    return result[0].toBoolean();
  }

  try_setBridgeAddress(_bridgeAddress: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setBridgeAddress",
      "setBridgeAddress(address):(bool)",
      [ethereum.Value.fromAddress(_bridgeAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setFlagToFactoryAddress(
    _flagCode: BigInt,
    _factoryAddress: Address
  ): boolean {
    let result = super.call(
      "setFlagToFactoryAddress",
      "setFlagToFactoryAddress(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_flagCode),
        ethereum.Value.fromAddress(_factoryAddress)
      ]
    );

    return result[0].toBoolean();
  }

  try_setFlagToFactoryAddress(
    _flagCode: BigInt,
    _factoryAddress: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setFlagToFactoryAddress",
      "setFlagToFactoryAddress(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_flagCode),
        ethereum.Value.fromAddress(_factoryAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setFlagToFactoryAddressMulti(
    dexesArgs: Array<OneSplit__setFlagToFactoryAddressMultiInputDexesArgsStruct>
  ): boolean {
    let result = super.call(
      "setFlagToFactoryAddressMulti",
      "setFlagToFactoryAddressMulti((address,uint256)[]):(bool)",
      [ethereum.Value.fromTupleArray(dexesArgs)]
    );

    return result[0].toBoolean();
  }

  try_setFlagToFactoryAddressMulti(
    dexesArgs: Array<OneSplit__setFlagToFactoryAddressMultiInputDexesArgsStruct>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setFlagToFactoryAddressMulti",
      "setFlagToFactoryAddressMulti((address,uint256)[]):(bool)",
      [ethereum.Value.fromTupleArray(dexesArgs)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setGetViewAddress(_oneSplitView: Address): boolean {
    let result = super.call(
      "setGetViewAddress",
      "setGetViewAddress(address):(bool)",
      [ethereum.Value.fromAddress(_oneSplitView)]
    );

    return result[0].toBoolean();
  }

  try_setGetViewAddress(_oneSplitView: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setGetViewAddress",
      "setGetViewAddress(address):(bool)",
      [ethereum.Value.fromAddress(_oneSplitView)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setHandlerAddress(_handlerAddress: Address): boolean {
    let result = super.call(
      "setHandlerAddress",
      "setHandlerAddress(address):(bool)",
      [ethereum.Value.fromAddress(_handlerAddress)]
    );

    return result[0].toBoolean();
  }

  try_setHandlerAddress(
    _handlerAddress: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setHandlerAddress",
      "setHandlerAddress(address):(bool)",
      [ethereum.Value.fromAddress(_handlerAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setReserveAddress(_reserveAddress: Address): boolean {
    let result = super.call(
      "setReserveAddress",
      "setReserveAddress(address):(bool)",
      [ethereum.Value.fromAddress(_reserveAddress)]
    );

    return result[0].toBoolean();
  }

  try_setReserveAddress(
    _reserveAddress: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setReserveAddress",
      "setReserveAddress(address):(bool)",
      [ethereum.Value.fromAddress(_reserveAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setWNativeAddresses(_native: Address, _wrappedNative: Address): boolean {
    let result = super.call(
      "setWNativeAddresses",
      "setWNativeAddresses(address,address):(bool)",
      [
        ethereum.Value.fromAddress(_native),
        ethereum.Value.fromAddress(_wrappedNative)
      ]
    );

    return result[0].toBoolean();
  }

  try_setWNativeAddresses(
    _native: Address,
    _wrappedNative: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setWNativeAddresses",
      "setWNativeAddresses(address,address):(bool)",
      [
        ethereum.Value.fromAddress(_native),
        ethereum.Value.fromAddress(_wrappedNative)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  wnativeAddress(): Address {
    let result = super.call("wnativeAddress", "wnativeAddress():(address)", []);

    return result[0].toAddress();
  }

  try_wnativeAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "wnativeAddress",
      "wnativeAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _oneSplitView(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _handlerAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _reserveAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _bridgeAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get ethHandler(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetBridgeAddressCall extends ethereum.Call {
  get inputs(): SetBridgeAddressCall__Inputs {
    return new SetBridgeAddressCall__Inputs(this);
  }

  get outputs(): SetBridgeAddressCall__Outputs {
    return new SetBridgeAddressCall__Outputs(this);
  }
}

export class SetBridgeAddressCall__Inputs {
  _call: SetBridgeAddressCall;

  constructor(call: SetBridgeAddressCall) {
    this._call = call;
  }

  get _bridgeAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetBridgeAddressCall__Outputs {
  _call: SetBridgeAddressCall;

  constructor(call: SetBridgeAddressCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetEthHandlerCall extends ethereum.Call {
  get inputs(): SetEthHandlerCall__Inputs {
    return new SetEthHandlerCall__Inputs(this);
  }

  get outputs(): SetEthHandlerCall__Outputs {
    return new SetEthHandlerCall__Outputs(this);
  }
}

export class SetEthHandlerCall__Inputs {
  _call: SetEthHandlerCall;

  constructor(call: SetEthHandlerCall) {
    this._call = call;
  }

  get ethHandler(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetEthHandlerCall__Outputs {
  _call: SetEthHandlerCall;

  constructor(call: SetEthHandlerCall) {
    this._call = call;
  }
}

export class SetFlagToFactoryAddressCall extends ethereum.Call {
  get inputs(): SetFlagToFactoryAddressCall__Inputs {
    return new SetFlagToFactoryAddressCall__Inputs(this);
  }

  get outputs(): SetFlagToFactoryAddressCall__Outputs {
    return new SetFlagToFactoryAddressCall__Outputs(this);
  }
}

export class SetFlagToFactoryAddressCall__Inputs {
  _call: SetFlagToFactoryAddressCall;

  constructor(call: SetFlagToFactoryAddressCall) {
    this._call = call;
  }

  get _flagCode(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _factoryAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetFlagToFactoryAddressCall__Outputs {
  _call: SetFlagToFactoryAddressCall;

  constructor(call: SetFlagToFactoryAddressCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetFlagToFactoryAddressMultiCall extends ethereum.Call {
  get inputs(): SetFlagToFactoryAddressMultiCall__Inputs {
    return new SetFlagToFactoryAddressMultiCall__Inputs(this);
  }

  get outputs(): SetFlagToFactoryAddressMultiCall__Outputs {
    return new SetFlagToFactoryAddressMultiCall__Outputs(this);
  }
}

export class SetFlagToFactoryAddressMultiCall__Inputs {
  _call: SetFlagToFactoryAddressMultiCall;

  constructor(call: SetFlagToFactoryAddressMultiCall) {
    this._call = call;
  }

  get dexesArgs(): Array<SetFlagToFactoryAddressMultiCallDexesArgsStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      SetFlagToFactoryAddressMultiCallDexesArgsStruct
    >();
  }
}

export class SetFlagToFactoryAddressMultiCall__Outputs {
  _call: SetFlagToFactoryAddressMultiCall;

  constructor(call: SetFlagToFactoryAddressMultiCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetFlagToFactoryAddressMultiCallDexesArgsStruct extends ethereum.Tuple {
  get factoryAddress(): Address {
    return this[0].toAddress();
  }

  get _exchangeCode(): BigInt {
    return this[1].toBigInt();
  }
}

export class SetGetViewAddressCall extends ethereum.Call {
  get inputs(): SetGetViewAddressCall__Inputs {
    return new SetGetViewAddressCall__Inputs(this);
  }

  get outputs(): SetGetViewAddressCall__Outputs {
    return new SetGetViewAddressCall__Outputs(this);
  }
}

export class SetGetViewAddressCall__Inputs {
  _call: SetGetViewAddressCall;

  constructor(call: SetGetViewAddressCall) {
    this._call = call;
  }

  get _oneSplitView(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGetViewAddressCall__Outputs {
  _call: SetGetViewAddressCall;

  constructor(call: SetGetViewAddressCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetHandlerAddressCall extends ethereum.Call {
  get inputs(): SetHandlerAddressCall__Inputs {
    return new SetHandlerAddressCall__Inputs(this);
  }

  get outputs(): SetHandlerAddressCall__Outputs {
    return new SetHandlerAddressCall__Outputs(this);
  }
}

export class SetHandlerAddressCall__Inputs {
  _call: SetHandlerAddressCall;

  constructor(call: SetHandlerAddressCall) {
    this._call = call;
  }

  get _handlerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetHandlerAddressCall__Outputs {
  _call: SetHandlerAddressCall;

  constructor(call: SetHandlerAddressCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetReserveAddressCall extends ethereum.Call {
  get inputs(): SetReserveAddressCall__Inputs {
    return new SetReserveAddressCall__Inputs(this);
  }

  get outputs(): SetReserveAddressCall__Outputs {
    return new SetReserveAddressCall__Outputs(this);
  }
}

export class SetReserveAddressCall__Inputs {
  _call: SetReserveAddressCall;

  constructor(call: SetReserveAddressCall) {
    this._call = call;
  }

  get _reserveAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetReserveAddressCall__Outputs {
  _call: SetReserveAddressCall;

  constructor(call: SetReserveAddressCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetWNativeAddressesCall extends ethereum.Call {
  get inputs(): SetWNativeAddressesCall__Inputs {
    return new SetWNativeAddressesCall__Inputs(this);
  }

  get outputs(): SetWNativeAddressesCall__Outputs {
    return new SetWNativeAddressesCall__Outputs(this);
  }
}

export class SetWNativeAddressesCall__Inputs {
  _call: SetWNativeAddressesCall;

  constructor(call: SetWNativeAddressesCall) {
    this._call = call;
  }

  get _native(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _wrappedNative(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetWNativeAddressesCall__Outputs {
  _call: SetWNativeAddressesCall;

  constructor(call: SetWNativeAddressesCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SwapCall extends ethereum.Call {
  get inputs(): SwapCall__Inputs {
    return new SwapCall__Inputs(this);
  }

  get outputs(): SwapCall__Outputs {
    return new SwapCall__Outputs(this);
  }
}

export class SwapCall__Inputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get fromToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get destToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get minReturn(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get flags(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get dataTx(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get isWrapper(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }
}

export class SwapCall__Outputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get returnAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SwapInSameChainCall extends ethereum.Call {
  get inputs(): SwapInSameChainCall__Inputs {
    return new SwapInSameChainCall__Inputs(this);
  }

  get outputs(): SwapInSameChainCall__Outputs {
    return new SwapInSameChainCall__Outputs(this);
  }
}

export class SwapInSameChainCall__Inputs {
  _call: SwapInSameChainCall;

  constructor(call: SwapInSameChainCall) {
    this._call = call;
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minReturn(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get flags(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get dataTx(): Array<Bytes> {
    return this._call.inputValues[4].value.toBytesArray();
  }

  get isWrapper(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }

  get recipient(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get widgetID(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class SwapInSameChainCall__Outputs {
  _call: SwapInSameChainCall;

  constructor(call: SwapInSameChainCall) {
    this._call = call;
  }

  get returnAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SwapMultiCall extends ethereum.Call {
  get inputs(): SwapMultiCall__Inputs {
    return new SwapMultiCall__Inputs(this);
  }

  get outputs(): SwapMultiCall__Outputs {
    return new SwapMultiCall__Outputs(this);
  }
}

export class SwapMultiCall__Inputs {
  _call: SwapMultiCall;

  constructor(call: SwapMultiCall) {
    this._call = call;
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minReturn(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get flags(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get dataTx(): Array<Bytes> {
    return this._call.inputValues[4].value.toBytesArray();
  }

  get isWrapper(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }
}

export class SwapMultiCall__Outputs {
  _call: SwapMultiCall;

  constructor(call: SwapMultiCall) {
    this._call = call;
  }

  get returnAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SwapMultiWithRecipientCall extends ethereum.Call {
  get inputs(): SwapMultiWithRecipientCall__Inputs {
    return new SwapMultiWithRecipientCall__Inputs(this);
  }

  get outputs(): SwapMultiWithRecipientCall__Outputs {
    return new SwapMultiWithRecipientCall__Outputs(this);
  }
}

export class SwapMultiWithRecipientCall__Inputs {
  _call: SwapMultiWithRecipientCall;

  constructor(call: SwapMultiWithRecipientCall) {
    this._call = call;
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minReturn(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get flags(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get dataTx(): Array<Bytes> {
    return this._call.inputValues[4].value.toBytesArray();
  }

  get isWrapper(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }

  get recipient(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class SwapMultiWithRecipientCall__Outputs {
  _call: SwapMultiWithRecipientCall;

  constructor(call: SwapMultiWithRecipientCall) {
    this._call = call;
  }

  get returnAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SwapWithRecipientCall extends ethereum.Call {
  get inputs(): SwapWithRecipientCall__Inputs {
    return new SwapWithRecipientCall__Inputs(this);
  }

  get outputs(): SwapWithRecipientCall__Outputs {
    return new SwapWithRecipientCall__Outputs(this);
  }
}

export class SwapWithRecipientCall__Inputs {
  _call: SwapWithRecipientCall;

  constructor(call: SwapWithRecipientCall) {
    this._call = call;
  }

  get fromToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get destToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get minReturn(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get flags(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get dataTx(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get isWrapper(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }

  get recipient(): Address {
    return this._call.inputValues[7].value.toAddress();
  }
}

export class SwapWithRecipientCall__Outputs {
  _call: SwapWithRecipientCall;

  constructor(call: SwapWithRecipientCall) {
    this._call = call;
  }

  get returnAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
